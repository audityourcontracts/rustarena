"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum ArbitratorCanChangeBounty {
  NO
  YES
  DEFAULT
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Claim {
  id: ID!
  claim: String
  claimer: Bytes!
  createdAt: BigInt!
  master: Master!
  vault: Vault
  approvedAt: BigInt
  dismissedAt: BigInt
  severity: BigInt
  bountyPercentage: BigInt
  approver: Bytes
  hackerReward: BigInt
  hackerVestedReward: BigInt
  committeeReward: BigInt
  swapAndBurn: BigInt
  governanceHatReward: BigInt
  hackerHatReward: BigInt
  isChallenged: Boolean
}

input Claim_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  claim: String
  claim_not: String
  claim_gt: String
  claim_lt: String
  claim_gte: String
  claim_lte: String
  claim_in: [String!]
  claim_not_in: [String!]
  claim_contains: String
  claim_contains_nocase: String
  claim_not_contains: String
  claim_not_contains_nocase: String
  claim_starts_with: String
  claim_starts_with_nocase: String
  claim_not_starts_with: String
  claim_not_starts_with_nocase: String
  claim_ends_with: String
  claim_ends_with_nocase: String
  claim_not_ends_with: String
  claim_not_ends_with_nocase: String
  claimer: Bytes
  claimer_not: Bytes
  claimer_gt: Bytes
  claimer_lt: Bytes
  claimer_gte: Bytes
  claimer_lte: Bytes
  claimer_in: [Bytes!]
  claimer_not_in: [Bytes!]
  claimer_contains: Bytes
  claimer_not_contains: Bytes
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  master: String
  master_not: String
  master_gt: String
  master_lt: String
  master_gte: String
  master_lte: String
  master_in: [String!]
  master_not_in: [String!]
  master_contains: String
  master_contains_nocase: String
  master_not_contains: String
  master_not_contains_nocase: String
  master_starts_with: String
  master_starts_with_nocase: String
  master_not_starts_with: String
  master_not_starts_with_nocase: String
  master_ends_with: String
  master_ends_with_nocase: String
  master_not_ends_with: String
  master_not_ends_with_nocase: String
  master_: Master_filter
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Vault_filter
  approvedAt: BigInt
  approvedAt_not: BigInt
  approvedAt_gt: BigInt
  approvedAt_lt: BigInt
  approvedAt_gte: BigInt
  approvedAt_lte: BigInt
  approvedAt_in: [BigInt!]
  approvedAt_not_in: [BigInt!]
  dismissedAt: BigInt
  dismissedAt_not: BigInt
  dismissedAt_gt: BigInt
  dismissedAt_lt: BigInt
  dismissedAt_gte: BigInt
  dismissedAt_lte: BigInt
  dismissedAt_in: [BigInt!]
  dismissedAt_not_in: [BigInt!]
  severity: BigInt
  severity_not: BigInt
  severity_gt: BigInt
  severity_lt: BigInt
  severity_gte: BigInt
  severity_lte: BigInt
  severity_in: [BigInt!]
  severity_not_in: [BigInt!]
  bountyPercentage: BigInt
  bountyPercentage_not: BigInt
  bountyPercentage_gt: BigInt
  bountyPercentage_lt: BigInt
  bountyPercentage_gte: BigInt
  bountyPercentage_lte: BigInt
  bountyPercentage_in: [BigInt!]
  bountyPercentage_not_in: [BigInt!]
  approver: Bytes
  approver_not: Bytes
  approver_gt: Bytes
  approver_lt: Bytes
  approver_gte: Bytes
  approver_lte: Bytes
  approver_in: [Bytes!]
  approver_not_in: [Bytes!]
  approver_contains: Bytes
  approver_not_contains: Bytes
  hackerReward: BigInt
  hackerReward_not: BigInt
  hackerReward_gt: BigInt
  hackerReward_lt: BigInt
  hackerReward_gte: BigInt
  hackerReward_lte: BigInt
  hackerReward_in: [BigInt!]
  hackerReward_not_in: [BigInt!]
  hackerVestedReward: BigInt
  hackerVestedReward_not: BigInt
  hackerVestedReward_gt: BigInt
  hackerVestedReward_lt: BigInt
  hackerVestedReward_gte: BigInt
  hackerVestedReward_lte: BigInt
  hackerVestedReward_in: [BigInt!]
  hackerVestedReward_not_in: [BigInt!]
  committeeReward: BigInt
  committeeReward_not: BigInt
  committeeReward_gt: BigInt
  committeeReward_lt: BigInt
  committeeReward_gte: BigInt
  committeeReward_lte: BigInt
  committeeReward_in: [BigInt!]
  committeeReward_not_in: [BigInt!]
  swapAndBurn: BigInt
  swapAndBurn_not: BigInt
  swapAndBurn_gt: BigInt
  swapAndBurn_lt: BigInt
  swapAndBurn_gte: BigInt
  swapAndBurn_lte: BigInt
  swapAndBurn_in: [BigInt!]
  swapAndBurn_not_in: [BigInt!]
  governanceHatReward: BigInt
  governanceHatReward_not: BigInt
  governanceHatReward_gt: BigInt
  governanceHatReward_lt: BigInt
  governanceHatReward_gte: BigInt
  governanceHatReward_lte: BigInt
  governanceHatReward_in: [BigInt!]
  governanceHatReward_not_in: [BigInt!]
  hackerHatReward: BigInt
  hackerHatReward_not: BigInt
  hackerHatReward_gt: BigInt
  hackerHatReward_lt: BigInt
  hackerHatReward_gte: BigInt
  hackerHatReward_lte: BigInt
  hackerHatReward_in: [BigInt!]
  hackerHatReward_not_in: [BigInt!]
  isChallenged: Boolean
  isChallenged_not: Boolean
  isChallenged_in: [Boolean!]
  isChallenged_not_in: [Boolean!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Claim_filter]
  or: [Claim_filter]
}

enum Claim_orderBy {
  id
  claim
  claimer
  createdAt
  master
  master__id
  master__address
  master__governance
  master__totalRewardPaid
  master__rewardPerBlock
  master__startBlock
  master__createdAt
  master__swapToken
  master__numberOfSubmittedClaims
  master__withdrawPeriod
  master__safetyPeriod
  master__withdrawRequestEnablePeriod
  master__withdrawRequestPendingPeriod
  master__vestingHatDuration
  master__vestingHatPeriods
  master__setMaxBountyDelay
  master__claimFee
  master__feeSetter
  master__defaultArbitrator
  master__defaultArbitratorCanChangeBounty
  master__defaultChallengePeriod
  master__defaultChallengeTimeOutPeriod
  master__defaultGovernanceHatRewardSplit
  master__defaultHackerHatRewardSplit
  master__numberOfVaults
  master__emergencyPause
  vault
  vault__id
  vault__pid
  vault__name
  vault__symbol
  vault__stakingToken
  vault__stakingTokenDecimals
  vault__stakingTokenSymbol
  vault__honeyPotBalance
  vault__totalRewardPaid
  vault__committee
  vault__allocPoint
  vault__numberOfApprovedClaims
  vault__numberOfDismissedClaims
  vault__hackerVestedRewardSplit
  vault__hackerRewardSplit
  vault__committeeRewardSplit
  vault__swapAndBurnSplit
  vault__governanceHatRewardSplit
  vault__hackerHatRewardSplit
  vault__totalClaimedAmount
  vault__liquidityPool
  vault__registered
  vault__totalUsersShares
  vault__descriptionHash
  vault__depositPause
  vault__vestingDuration
  vault__vestingPeriods
  vault__committeeCheckedIn
  vault__maxBounty
  vault__arbitrator
  vault__arbitratorCanChangeBounty
  vault__challengePeriod
  vault__challengeTimeOutPeriod
  vault__pendingMaxBounty
  vault__withdrawalFee
  vault__owner
  vault__version
  approvedAt
  dismissedAt
  severity
  bountyPercentage
  approver
  hackerReward
  hackerVestedReward
  committeeReward
  swapAndBurn
  governanceHatReward
  hackerHatReward
  isChallenged
}

"""
8 bytes signed integer

"""
scalar Int8

type LoggedClaim {
  id: ID!
  claim: String!
  claimer: Bytes!
  createdAt: BigInt!
  master: Master!
}

input LoggedClaim_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  claim: String
  claim_not: String
  claim_gt: String
  claim_lt: String
  claim_gte: String
  claim_lte: String
  claim_in: [String!]
  claim_not_in: [String!]
  claim_contains: String
  claim_contains_nocase: String
  claim_not_contains: String
  claim_not_contains_nocase: String
  claim_starts_with: String
  claim_starts_with_nocase: String
  claim_not_starts_with: String
  claim_not_starts_with_nocase: String
  claim_ends_with: String
  claim_ends_with_nocase: String
  claim_not_ends_with: String
  claim_not_ends_with_nocase: String
  claimer: Bytes
  claimer_not: Bytes
  claimer_gt: Bytes
  claimer_lt: Bytes
  claimer_gte: Bytes
  claimer_lte: Bytes
  claimer_in: [Bytes!]
  claimer_not_in: [Bytes!]
  claimer_contains: Bytes
  claimer_not_contains: Bytes
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  master: String
  master_not: String
  master_gt: String
  master_lt: String
  master_gte: String
  master_lte: String
  master_in: [String!]
  master_not_in: [String!]
  master_contains: String
  master_contains_nocase: String
  master_not_contains: String
  master_not_contains_nocase: String
  master_starts_with: String
  master_starts_with_nocase: String
  master_not_starts_with: String
  master_not_starts_with_nocase: String
  master_ends_with: String
  master_ends_with_nocase: String
  master_not_ends_with: String
  master_not_ends_with_nocase: String
  master_: Master_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LoggedClaim_filter]
  or: [LoggedClaim_filter]
}

enum LoggedClaim_orderBy {
  id
  claim
  claimer
  createdAt
  master
  master__id
  master__address
  master__governance
  master__totalRewardPaid
  master__rewardPerBlock
  master__startBlock
  master__createdAt
  master__swapToken
  master__numberOfSubmittedClaims
  master__withdrawPeriod
  master__safetyPeriod
  master__withdrawRequestEnablePeriod
  master__withdrawRequestPendingPeriod
  master__vestingHatDuration
  master__vestingHatPeriods
  master__setMaxBountyDelay
  master__claimFee
  master__feeSetter
  master__defaultArbitrator
  master__defaultArbitratorCanChangeBounty
  master__defaultChallengePeriod
  master__defaultChallengeTimeOutPeriod
  master__defaultGovernanceHatRewardSplit
  master__defaultHackerHatRewardSplit
  master__numberOfVaults
  master__emergencyPause
}

type Master {
  id: ID!
  address: Bytes!
  governance: Bytes!
  totalRewardPaid: BigInt!
  rewardPerBlock: BigInt
  startBlock: BigInt
  vaults(skip: Int = 0, first: Int = 100, orderBy: Vault_orderBy, orderDirection: OrderDirection, where: Vault_filter): [Vault!]
  createdAt: BigInt!
  swapToken: Bytes!
  numberOfSubmittedClaims: BigInt!
  submittedClaim(skip: Int = 0, first: Int = 100, orderBy: Claim_orderBy, orderDirection: OrderDirection, where: Claim_filter): [Claim!]
  withdrawPeriod: BigInt!
  safetyPeriod: BigInt!
  withdrawRequestEnablePeriod: BigInt!
  withdrawRequestPendingPeriod: BigInt!
  vestingHatDuration: BigInt!
  vestingHatPeriods: BigInt!
  setMaxBountyDelay: BigInt
  claimFee: BigInt
  feeSetter: Bytes
  defaultArbitrator: Bytes
  defaultArbitratorCanChangeBounty: Boolean
  defaultChallengePeriod: BigInt
  defaultChallengeTimeOutPeriod: BigInt
  defaultGovernanceHatRewardSplit: BigInt
  defaultHackerHatRewardSplit: BigInt
  numberOfVaults: BigInt!
  emergencyPause: Boolean!
}

input Master_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  governance: Bytes
  governance_not: Bytes
  governance_gt: Bytes
  governance_lt: Bytes
  governance_gte: Bytes
  governance_lte: Bytes
  governance_in: [Bytes!]
  governance_not_in: [Bytes!]
  governance_contains: Bytes
  governance_not_contains: Bytes
  totalRewardPaid: BigInt
  totalRewardPaid_not: BigInt
  totalRewardPaid_gt: BigInt
  totalRewardPaid_lt: BigInt
  totalRewardPaid_gte: BigInt
  totalRewardPaid_lte: BigInt
  totalRewardPaid_in: [BigInt!]
  totalRewardPaid_not_in: [BigInt!]
  rewardPerBlock: BigInt
  rewardPerBlock_not: BigInt
  rewardPerBlock_gt: BigInt
  rewardPerBlock_lt: BigInt
  rewardPerBlock_gte: BigInt
  rewardPerBlock_lte: BigInt
  rewardPerBlock_in: [BigInt!]
  rewardPerBlock_not_in: [BigInt!]
  startBlock: BigInt
  startBlock_not: BigInt
  startBlock_gt: BigInt
  startBlock_lt: BigInt
  startBlock_gte: BigInt
  startBlock_lte: BigInt
  startBlock_in: [BigInt!]
  startBlock_not_in: [BigInt!]
  vaults_: Vault_filter
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  swapToken: Bytes
  swapToken_not: Bytes
  swapToken_gt: Bytes
  swapToken_lt: Bytes
  swapToken_gte: Bytes
  swapToken_lte: Bytes
  swapToken_in: [Bytes!]
  swapToken_not_in: [Bytes!]
  swapToken_contains: Bytes
  swapToken_not_contains: Bytes
  numberOfSubmittedClaims: BigInt
  numberOfSubmittedClaims_not: BigInt
  numberOfSubmittedClaims_gt: BigInt
  numberOfSubmittedClaims_lt: BigInt
  numberOfSubmittedClaims_gte: BigInt
  numberOfSubmittedClaims_lte: BigInt
  numberOfSubmittedClaims_in: [BigInt!]
  numberOfSubmittedClaims_not_in: [BigInt!]
  submittedClaim_: Claim_filter
  withdrawPeriod: BigInt
  withdrawPeriod_not: BigInt
  withdrawPeriod_gt: BigInt
  withdrawPeriod_lt: BigInt
  withdrawPeriod_gte: BigInt
  withdrawPeriod_lte: BigInt
  withdrawPeriod_in: [BigInt!]
  withdrawPeriod_not_in: [BigInt!]
  safetyPeriod: BigInt
  safetyPeriod_not: BigInt
  safetyPeriod_gt: BigInt
  safetyPeriod_lt: BigInt
  safetyPeriod_gte: BigInt
  safetyPeriod_lte: BigInt
  safetyPeriod_in: [BigInt!]
  safetyPeriod_not_in: [BigInt!]
  withdrawRequestEnablePeriod: BigInt
  withdrawRequestEnablePeriod_not: BigInt
  withdrawRequestEnablePeriod_gt: BigInt
  withdrawRequestEnablePeriod_lt: BigInt
  withdrawRequestEnablePeriod_gte: BigInt
  withdrawRequestEnablePeriod_lte: BigInt
  withdrawRequestEnablePeriod_in: [BigInt!]
  withdrawRequestEnablePeriod_not_in: [BigInt!]
  withdrawRequestPendingPeriod: BigInt
  withdrawRequestPendingPeriod_not: BigInt
  withdrawRequestPendingPeriod_gt: BigInt
  withdrawRequestPendingPeriod_lt: BigInt
  withdrawRequestPendingPeriod_gte: BigInt
  withdrawRequestPendingPeriod_lte: BigInt
  withdrawRequestPendingPeriod_in: [BigInt!]
  withdrawRequestPendingPeriod_not_in: [BigInt!]
  vestingHatDuration: BigInt
  vestingHatDuration_not: BigInt
  vestingHatDuration_gt: BigInt
  vestingHatDuration_lt: BigInt
  vestingHatDuration_gte: BigInt
  vestingHatDuration_lte: BigInt
  vestingHatDuration_in: [BigInt!]
  vestingHatDuration_not_in: [BigInt!]
  vestingHatPeriods: BigInt
  vestingHatPeriods_not: BigInt
  vestingHatPeriods_gt: BigInt
  vestingHatPeriods_lt: BigInt
  vestingHatPeriods_gte: BigInt
  vestingHatPeriods_lte: BigInt
  vestingHatPeriods_in: [BigInt!]
  vestingHatPeriods_not_in: [BigInt!]
  setMaxBountyDelay: BigInt
  setMaxBountyDelay_not: BigInt
  setMaxBountyDelay_gt: BigInt
  setMaxBountyDelay_lt: BigInt
  setMaxBountyDelay_gte: BigInt
  setMaxBountyDelay_lte: BigInt
  setMaxBountyDelay_in: [BigInt!]
  setMaxBountyDelay_not_in: [BigInt!]
  claimFee: BigInt
  claimFee_not: BigInt
  claimFee_gt: BigInt
  claimFee_lt: BigInt
  claimFee_gte: BigInt
  claimFee_lte: BigInt
  claimFee_in: [BigInt!]
  claimFee_not_in: [BigInt!]
  feeSetter: Bytes
  feeSetter_not: Bytes
  feeSetter_gt: Bytes
  feeSetter_lt: Bytes
  feeSetter_gte: Bytes
  feeSetter_lte: Bytes
  feeSetter_in: [Bytes!]
  feeSetter_not_in: [Bytes!]
  feeSetter_contains: Bytes
  feeSetter_not_contains: Bytes
  defaultArbitrator: Bytes
  defaultArbitrator_not: Bytes
  defaultArbitrator_gt: Bytes
  defaultArbitrator_lt: Bytes
  defaultArbitrator_gte: Bytes
  defaultArbitrator_lte: Bytes
  defaultArbitrator_in: [Bytes!]
  defaultArbitrator_not_in: [Bytes!]
  defaultArbitrator_contains: Bytes
  defaultArbitrator_not_contains: Bytes
  defaultArbitratorCanChangeBounty: Boolean
  defaultArbitratorCanChangeBounty_not: Boolean
  defaultArbitratorCanChangeBounty_in: [Boolean!]
  defaultArbitratorCanChangeBounty_not_in: [Boolean!]
  defaultChallengePeriod: BigInt
  defaultChallengePeriod_not: BigInt
  defaultChallengePeriod_gt: BigInt
  defaultChallengePeriod_lt: BigInt
  defaultChallengePeriod_gte: BigInt
  defaultChallengePeriod_lte: BigInt
  defaultChallengePeriod_in: [BigInt!]
  defaultChallengePeriod_not_in: [BigInt!]
  defaultChallengeTimeOutPeriod: BigInt
  defaultChallengeTimeOutPeriod_not: BigInt
  defaultChallengeTimeOutPeriod_gt: BigInt
  defaultChallengeTimeOutPeriod_lt: BigInt
  defaultChallengeTimeOutPeriod_gte: BigInt
  defaultChallengeTimeOutPeriod_lte: BigInt
  defaultChallengeTimeOutPeriod_in: [BigInt!]
  defaultChallengeTimeOutPeriod_not_in: [BigInt!]
  defaultGovernanceHatRewardSplit: BigInt
  defaultGovernanceHatRewardSplit_not: BigInt
  defaultGovernanceHatRewardSplit_gt: BigInt
  defaultGovernanceHatRewardSplit_lt: BigInt
  defaultGovernanceHatRewardSplit_gte: BigInt
  defaultGovernanceHatRewardSplit_lte: BigInt
  defaultGovernanceHatRewardSplit_in: [BigInt!]
  defaultGovernanceHatRewardSplit_not_in: [BigInt!]
  defaultHackerHatRewardSplit: BigInt
  defaultHackerHatRewardSplit_not: BigInt
  defaultHackerHatRewardSplit_gt: BigInt
  defaultHackerHatRewardSplit_lt: BigInt
  defaultHackerHatRewardSplit_gte: BigInt
  defaultHackerHatRewardSplit_lte: BigInt
  defaultHackerHatRewardSplit_in: [BigInt!]
  defaultHackerHatRewardSplit_not_in: [BigInt!]
  numberOfVaults: BigInt
  numberOfVaults_not: BigInt
  numberOfVaults_gt: BigInt
  numberOfVaults_lt: BigInt
  numberOfVaults_gte: BigInt
  numberOfVaults_lte: BigInt
  numberOfVaults_in: [BigInt!]
  numberOfVaults_not_in: [BigInt!]
  emergencyPause: Boolean
  emergencyPause_not: Boolean
  emergencyPause_in: [Boolean!]
  emergencyPause_not_in: [Boolean!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Master_filter]
  or: [Master_filter]
}

enum Master_orderBy {
  id
  address
  governance
  totalRewardPaid
  rewardPerBlock
  startBlock
  vaults
  createdAt
  swapToken
  numberOfSubmittedClaims
  submittedClaim
  withdrawPeriod
  safetyPeriod
  withdrawRequestEnablePeriod
  withdrawRequestPendingPeriod
  vestingHatDuration
  vestingHatPeriods
  setMaxBountyDelay
  claimFee
  feeSetter
  defaultArbitrator
  defaultArbitratorCanChangeBounty
  defaultChallengePeriod
  defaultChallengeTimeOutPeriod
  defaultGovernanceHatRewardSplit
  defaultHackerHatRewardSplit
  numberOfVaults
  emergencyPause
}

type NFTMaster {
  id: ID!
  merkleTreeIPFSRef: String!
  root: Bytes!
  deadline: BigInt!
  nfts(skip: Int = 0, first: Int = 100, orderBy: NFTToken_orderBy, orderDirection: OrderDirection, where: NFTToken_filter): [NFTToken!]
}

input NFTMaster_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  merkleTreeIPFSRef: String
  merkleTreeIPFSRef_not: String
  merkleTreeIPFSRef_gt: String
  merkleTreeIPFSRef_lt: String
  merkleTreeIPFSRef_gte: String
  merkleTreeIPFSRef_lte: String
  merkleTreeIPFSRef_in: [String!]
  merkleTreeIPFSRef_not_in: [String!]
  merkleTreeIPFSRef_contains: String
  merkleTreeIPFSRef_contains_nocase: String
  merkleTreeIPFSRef_not_contains: String
  merkleTreeIPFSRef_not_contains_nocase: String
  merkleTreeIPFSRef_starts_with: String
  merkleTreeIPFSRef_starts_with_nocase: String
  merkleTreeIPFSRef_not_starts_with: String
  merkleTreeIPFSRef_not_starts_with_nocase: String
  merkleTreeIPFSRef_ends_with: String
  merkleTreeIPFSRef_ends_with_nocase: String
  merkleTreeIPFSRef_not_ends_with: String
  merkleTreeIPFSRef_not_ends_with_nocase: String
  root: Bytes
  root_not: Bytes
  root_gt: Bytes
  root_lt: Bytes
  root_gte: Bytes
  root_lte: Bytes
  root_in: [Bytes!]
  root_not_in: [Bytes!]
  root_contains: Bytes
  root_not_contains: Bytes
  deadline: BigInt
  deadline_not: BigInt
  deadline_gt: BigInt
  deadline_lt: BigInt
  deadline_gte: BigInt
  deadline_lte: BigInt
  deadline_in: [BigInt!]
  deadline_not_in: [BigInt!]
  nfts_: NFTToken_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NFTMaster_filter]
  or: [NFTMaster_filter]
}

enum NFTMaster_orderBy {
  id
  merkleTreeIPFSRef
  root
  deadline
  nfts
}

type NFTOwner {
  id: ID!
  nft: NFTToken!
  address: Bytes!
  balance: BigInt!
}

input NFTOwner_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: NFTToken_filter
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NFTOwner_filter]
  or: [NFTOwner_filter]
}

enum NFTOwner_orderBy {
  id
  nft
  nft__id
  nft__tokenURI
  nft__tokenId
  address
  balance
}

type NFTToken {
  id: ID!
  tokenURI: String!
  owners(skip: Int = 0, first: Int = 100, orderBy: NFTOwner_orderBy, orderDirection: OrderDirection, where: NFTOwner_filter): [NFTOwner!]
  tokenId: BigInt!
  nftMaster: NFTMaster!
}

input NFTToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokenURI: String
  tokenURI_not: String
  tokenURI_gt: String
  tokenURI_lt: String
  tokenURI_gte: String
  tokenURI_lte: String
  tokenURI_in: [String!]
  tokenURI_not_in: [String!]
  tokenURI_contains: String
  tokenURI_contains_nocase: String
  tokenURI_not_contains: String
  tokenURI_not_contains_nocase: String
  tokenURI_starts_with: String
  tokenURI_starts_with_nocase: String
  tokenURI_not_starts_with: String
  tokenURI_not_starts_with_nocase: String
  tokenURI_ends_with: String
  tokenURI_ends_with_nocase: String
  tokenURI_not_ends_with: String
  tokenURI_not_ends_with_nocase: String
  owners_: NFTOwner_filter
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  nftMaster: String
  nftMaster_not: String
  nftMaster_gt: String
  nftMaster_lt: String
  nftMaster_gte: String
  nftMaster_lte: String
  nftMaster_in: [String!]
  nftMaster_not_in: [String!]
  nftMaster_contains: String
  nftMaster_contains_nocase: String
  nftMaster_not_contains: String
  nftMaster_not_contains_nocase: String
  nftMaster_starts_with: String
  nftMaster_starts_with_nocase: String
  nftMaster_not_starts_with: String
  nftMaster_not_starts_with_nocase: String
  nftMaster_ends_with: String
  nftMaster_ends_with_nocase: String
  nftMaster_not_ends_with: String
  nftMaster_not_ends_with_nocase: String
  nftMaster_: NFTMaster_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NFTToken_filter]
  or: [NFTToken_filter]
}

enum NFTToken_orderBy {
  id
  tokenURI
  owners
  tokenId
  nftMaster
  nftMaster__id
  nftMaster__merkleTreeIPFSRef
  nftMaster__root
  nftMaster__deadline
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type PoolWithdrawRequest {
  id: ID!
  beneficiary: Bytes!
  vault: Vault!
  withdrawEnableTime: BigInt!
  createdAt: BigInt!
  expiryTime: BigInt!
}

input PoolWithdrawRequest_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  beneficiary: Bytes
  beneficiary_not: Bytes
  beneficiary_gt: Bytes
  beneficiary_lt: Bytes
  beneficiary_gte: Bytes
  beneficiary_lte: Bytes
  beneficiary_in: [Bytes!]
  beneficiary_not_in: [Bytes!]
  beneficiary_contains: Bytes
  beneficiary_not_contains: Bytes
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Vault_filter
  withdrawEnableTime: BigInt
  withdrawEnableTime_not: BigInt
  withdrawEnableTime_gt: BigInt
  withdrawEnableTime_lt: BigInt
  withdrawEnableTime_gte: BigInt
  withdrawEnableTime_lte: BigInt
  withdrawEnableTime_in: [BigInt!]
  withdrawEnableTime_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  expiryTime: BigInt
  expiryTime_not: BigInt
  expiryTime_gt: BigInt
  expiryTime_lt: BigInt
  expiryTime_gte: BigInt
  expiryTime_lte: BigInt
  expiryTime_in: [BigInt!]
  expiryTime_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolWithdrawRequest_filter]
  or: [PoolWithdrawRequest_filter]
}

enum PoolWithdrawRequest_orderBy {
  id
  beneficiary
  vault
  vault__id
  vault__pid
  vault__name
  vault__symbol
  vault__stakingToken
  vault__stakingTokenDecimals
  vault__stakingTokenSymbol
  vault__honeyPotBalance
  vault__totalRewardPaid
  vault__committee
  vault__allocPoint
  vault__numberOfApprovedClaims
  vault__numberOfDismissedClaims
  vault__hackerVestedRewardSplit
  vault__hackerRewardSplit
  vault__committeeRewardSplit
  vault__swapAndBurnSplit
  vault__governanceHatRewardSplit
  vault__hackerHatRewardSplit
  vault__totalClaimedAmount
  vault__liquidityPool
  vault__registered
  vault__totalUsersShares
  vault__descriptionHash
  vault__depositPause
  vault__vestingDuration
  vault__vestingPeriods
  vault__committeeCheckedIn
  vault__maxBounty
  vault__arbitrator
  vault__arbitratorCanChangeBounty
  vault__challengePeriod
  vault__challengeTimeOutPeriod
  vault__pendingMaxBounty
  vault__withdrawalFee
  vault__owner
  vault__version
  withdrawEnableTime
  createdAt
  expiryTime
}

type Query {
  vault(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vault
  vaults(
    skip: Int = 0
    first: Int = 100
    orderBy: Vault_orderBy
    orderDirection: OrderDirection
    where: Vault_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vault!]!
  master(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Master
  masters(
    skip: Int = 0
    first: Int = 100
    orderBy: Master_orderBy
    orderDirection: OrderDirection
    where: Master_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Master!]!
  staker(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Staker
  stakers(
    skip: Int = 0
    first: Int = 100
    orderBy: Staker_orderBy
    orderDirection: OrderDirection
    where: Staker_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Staker!]!
  claim(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Claim
  claims(
    skip: Int = 0
    first: Int = 100
    orderBy: Claim_orderBy
    orderDirection: OrderDirection
    where: Claim_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Claim!]!
  loggedClaim(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoggedClaim
  loggedClaims(
    skip: Int = 0
    first: Int = 100
    orderBy: LoggedClaim_orderBy
    orderDirection: OrderDirection
    where: LoggedClaim_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoggedClaim!]!
  poolWithdrawRequest(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolWithdrawRequest
  poolWithdrawRequests(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolWithdrawRequest_orderBy
    orderDirection: OrderDirection
    where: PoolWithdrawRequest_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolWithdrawRequest!]!
  rewardController(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardController
  rewardControllers(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardController_orderBy
    orderDirection: OrderDirection
    where: RewardController_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardController!]!
  nftmaster(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFTMaster
  nftmasters(
    skip: Int = 0
    first: Int = 100
    orderBy: NFTMaster_orderBy
    orderDirection: OrderDirection
    where: NFTMaster_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFTMaster!]!
  nftowner(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFTOwner
  nftowners(
    skip: Int = 0
    first: Int = 100
    orderBy: NFTOwner_orderBy
    orderDirection: OrderDirection
    where: NFTOwner_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFTOwner!]!
  nfttoken(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFTToken
  nfttokens(
    skip: Int = 0
    first: Int = 100
    orderBy: NFTToken_orderBy
    orderDirection: OrderDirection
    where: NFTToken_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFTToken!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type RewardController {
  id: ID!
  vaults(skip: Int = 0, first: Int = 100, orderBy: Vault_orderBy, orderDirection: OrderDirection, where: Vault_filter): [Vault!]
  startBlock: BigInt!
  epochLength: BigInt!
  rewardToken: Bytes!
  epochRewardPerBlock: [BigInt!]!
  owner: Bytes!
  totalRewardPaid: BigInt!
  rewardTokenDecimals: BigInt!
  rewardTokenSymbol: String!
  totalAllocPoint: BigInt!
}

input RewardController_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  vaults_: Vault_filter
  startBlock: BigInt
  startBlock_not: BigInt
  startBlock_gt: BigInt
  startBlock_lt: BigInt
  startBlock_gte: BigInt
  startBlock_lte: BigInt
  startBlock_in: [BigInt!]
  startBlock_not_in: [BigInt!]
  epochLength: BigInt
  epochLength_not: BigInt
  epochLength_gt: BigInt
  epochLength_lt: BigInt
  epochLength_gte: BigInt
  epochLength_lte: BigInt
  epochLength_in: [BigInt!]
  epochLength_not_in: [BigInt!]
  rewardToken: Bytes
  rewardToken_not: Bytes
  rewardToken_gt: Bytes
  rewardToken_lt: Bytes
  rewardToken_gte: Bytes
  rewardToken_lte: Bytes
  rewardToken_in: [Bytes!]
  rewardToken_not_in: [Bytes!]
  rewardToken_contains: Bytes
  rewardToken_not_contains: Bytes
  epochRewardPerBlock: [BigInt!]
  epochRewardPerBlock_not: [BigInt!]
  epochRewardPerBlock_contains: [BigInt!]
  epochRewardPerBlock_contains_nocase: [BigInt!]
  epochRewardPerBlock_not_contains: [BigInt!]
  epochRewardPerBlock_not_contains_nocase: [BigInt!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  totalRewardPaid: BigInt
  totalRewardPaid_not: BigInt
  totalRewardPaid_gt: BigInt
  totalRewardPaid_lt: BigInt
  totalRewardPaid_gte: BigInt
  totalRewardPaid_lte: BigInt
  totalRewardPaid_in: [BigInt!]
  totalRewardPaid_not_in: [BigInt!]
  rewardTokenDecimals: BigInt
  rewardTokenDecimals_not: BigInt
  rewardTokenDecimals_gt: BigInt
  rewardTokenDecimals_lt: BigInt
  rewardTokenDecimals_gte: BigInt
  rewardTokenDecimals_lte: BigInt
  rewardTokenDecimals_in: [BigInt!]
  rewardTokenDecimals_not_in: [BigInt!]
  rewardTokenSymbol: String
  rewardTokenSymbol_not: String
  rewardTokenSymbol_gt: String
  rewardTokenSymbol_lt: String
  rewardTokenSymbol_gte: String
  rewardTokenSymbol_lte: String
  rewardTokenSymbol_in: [String!]
  rewardTokenSymbol_not_in: [String!]
  rewardTokenSymbol_contains: String
  rewardTokenSymbol_contains_nocase: String
  rewardTokenSymbol_not_contains: String
  rewardTokenSymbol_not_contains_nocase: String
  rewardTokenSymbol_starts_with: String
  rewardTokenSymbol_starts_with_nocase: String
  rewardTokenSymbol_not_starts_with: String
  rewardTokenSymbol_not_starts_with_nocase: String
  rewardTokenSymbol_ends_with: String
  rewardTokenSymbol_ends_with_nocase: String
  rewardTokenSymbol_not_ends_with: String
  rewardTokenSymbol_not_ends_with_nocase: String
  totalAllocPoint: BigInt
  totalAllocPoint_not: BigInt
  totalAllocPoint_gt: BigInt
  totalAllocPoint_lt: BigInt
  totalAllocPoint_gte: BigInt
  totalAllocPoint_lte: BigInt
  totalAllocPoint_in: [BigInt!]
  totalAllocPoint_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RewardController_filter]
  or: [RewardController_filter]
}

enum RewardController_orderBy {
  id
  vaults
  startBlock
  epochLength
  rewardToken
  epochRewardPerBlock
  owner
  totalRewardPaid
  rewardTokenDecimals
  rewardTokenSymbol
  totalAllocPoint
}

type Staker {
  id: ID!
  createdAt: BigInt!
  address: Bytes!
  vault: Vault!
  depositAmount: BigInt!
  withdrawAmount: BigInt!
  totalRewardPaid: BigInt!
  shares: BigInt!
  pid: BigInt!
  master: Master!
}

input Staker_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  vault: String
  vault_not: String
  vault_gt: String
  vault_lt: String
  vault_gte: String
  vault_lte: String
  vault_in: [String!]
  vault_not_in: [String!]
  vault_contains: String
  vault_contains_nocase: String
  vault_not_contains: String
  vault_not_contains_nocase: String
  vault_starts_with: String
  vault_starts_with_nocase: String
  vault_not_starts_with: String
  vault_not_starts_with_nocase: String
  vault_ends_with: String
  vault_ends_with_nocase: String
  vault_not_ends_with: String
  vault_not_ends_with_nocase: String
  vault_: Vault_filter
  depositAmount: BigInt
  depositAmount_not: BigInt
  depositAmount_gt: BigInt
  depositAmount_lt: BigInt
  depositAmount_gte: BigInt
  depositAmount_lte: BigInt
  depositAmount_in: [BigInt!]
  depositAmount_not_in: [BigInt!]
  withdrawAmount: BigInt
  withdrawAmount_not: BigInt
  withdrawAmount_gt: BigInt
  withdrawAmount_lt: BigInt
  withdrawAmount_gte: BigInt
  withdrawAmount_lte: BigInt
  withdrawAmount_in: [BigInt!]
  withdrawAmount_not_in: [BigInt!]
  totalRewardPaid: BigInt
  totalRewardPaid_not: BigInt
  totalRewardPaid_gt: BigInt
  totalRewardPaid_lt: BigInt
  totalRewardPaid_gte: BigInt
  totalRewardPaid_lte: BigInt
  totalRewardPaid_in: [BigInt!]
  totalRewardPaid_not_in: [BigInt!]
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  pid: BigInt
  pid_not: BigInt
  pid_gt: BigInt
  pid_lt: BigInt
  pid_gte: BigInt
  pid_lte: BigInt
  pid_in: [BigInt!]
  pid_not_in: [BigInt!]
  master: String
  master_not: String
  master_gt: String
  master_lt: String
  master_gte: String
  master_lte: String
  master_in: [String!]
  master_not_in: [String!]
  master_contains: String
  master_contains_nocase: String
  master_not_contains: String
  master_not_contains_nocase: String
  master_starts_with: String
  master_starts_with_nocase: String
  master_not_starts_with: String
  master_not_starts_with_nocase: String
  master_ends_with: String
  master_ends_with_nocase: String
  master_not_ends_with: String
  master_not_ends_with_nocase: String
  master_: Master_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Staker_filter]
  or: [Staker_filter]
}

enum Staker_orderBy {
  id
  createdAt
  address
  vault
  vault__id
  vault__pid
  vault__name
  vault__symbol
  vault__stakingToken
  vault__stakingTokenDecimals
  vault__stakingTokenSymbol
  vault__honeyPotBalance
  vault__totalRewardPaid
  vault__committee
  vault__allocPoint
  vault__numberOfApprovedClaims
  vault__numberOfDismissedClaims
  vault__hackerVestedRewardSplit
  vault__hackerRewardSplit
  vault__committeeRewardSplit
  vault__swapAndBurnSplit
  vault__governanceHatRewardSplit
  vault__hackerHatRewardSplit
  vault__totalClaimedAmount
  vault__liquidityPool
  vault__registered
  vault__totalUsersShares
  vault__descriptionHash
  vault__depositPause
  vault__vestingDuration
  vault__vestingPeriods
  vault__committeeCheckedIn
  vault__maxBounty
  vault__arbitrator
  vault__arbitratorCanChangeBounty
  vault__challengePeriod
  vault__challengeTimeOutPeriod
  vault__pendingMaxBounty
  vault__withdrawalFee
  vault__owner
  vault__version
  depositAmount
  withdrawAmount
  totalRewardPaid
  shares
  pid
  master
  master__id
  master__address
  master__governance
  master__totalRewardPaid
  master__rewardPerBlock
  master__startBlock
  master__createdAt
  master__swapToken
  master__numberOfSubmittedClaims
  master__withdrawPeriod
  master__safetyPeriod
  master__withdrawRequestEnablePeriod
  master__withdrawRequestPendingPeriod
  master__vestingHatDuration
  master__vestingHatPeriods
  master__setMaxBountyDelay
  master__claimFee
  master__feeSetter
  master__defaultArbitrator
  master__defaultArbitratorCanChangeBounty
  master__defaultChallengePeriod
  master__defaultChallengeTimeOutPeriod
  master__defaultGovernanceHatRewardSplit
  master__defaultHackerHatRewardSplit
  master__numberOfVaults
  master__emergencyPause
}

type Subscription {
  vault(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vault
  vaults(
    skip: Int = 0
    first: Int = 100
    orderBy: Vault_orderBy
    orderDirection: OrderDirection
    where: Vault_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vault!]!
  master(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Master
  masters(
    skip: Int = 0
    first: Int = 100
    orderBy: Master_orderBy
    orderDirection: OrderDirection
    where: Master_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Master!]!
  staker(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Staker
  stakers(
    skip: Int = 0
    first: Int = 100
    orderBy: Staker_orderBy
    orderDirection: OrderDirection
    where: Staker_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Staker!]!
  claim(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Claim
  claims(
    skip: Int = 0
    first: Int = 100
    orderBy: Claim_orderBy
    orderDirection: OrderDirection
    where: Claim_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Claim!]!
  loggedClaim(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoggedClaim
  loggedClaims(
    skip: Int = 0
    first: Int = 100
    orderBy: LoggedClaim_orderBy
    orderDirection: OrderDirection
    where: LoggedClaim_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoggedClaim!]!
  poolWithdrawRequest(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolWithdrawRequest
  poolWithdrawRequests(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolWithdrawRequest_orderBy
    orderDirection: OrderDirection
    where: PoolWithdrawRequest_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolWithdrawRequest!]!
  rewardController(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardController
  rewardControllers(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardController_orderBy
    orderDirection: OrderDirection
    where: RewardController_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardController!]!
  nftmaster(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFTMaster
  nftmasters(
    skip: Int = 0
    first: Int = 100
    orderBy: NFTMaster_orderBy
    orderDirection: OrderDirection
    where: NFTMaster_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFTMaster!]!
  nftowner(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFTOwner
  nftowners(
    skip: Int = 0
    first: Int = 100
    orderBy: NFTOwner_orderBy
    orderDirection: OrderDirection
    where: NFTOwner_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFTOwner!]!
  nfttoken(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NFTToken
  nfttokens(
    skip: Int = 0
    first: Int = 100
    orderBy: NFTToken_orderBy
    orderDirection: OrderDirection
    where: NFTToken_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NFTToken!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Vault {
  id: ID!
  pid: BigInt!
  name: String
  symbol: String
  stakingToken: Bytes!
  stakingTokenDecimals: BigInt!
  stakingTokenSymbol: String!
  stakers(skip: Int = 0, first: Int = 100, orderBy: Staker_orderBy, orderDirection: OrderDirection, where: Staker_filter): [Staker!]
  honeyPotBalance: BigInt!
  totalRewardPaid: BigInt!
  committee: Bytes!
  allocPoints: [BigInt!]
  allocPoint: BigInt
  master: Master!
  numberOfApprovedClaims: BigInt!
  numberOfDismissedClaims: BigInt!
  rewardsLevels: [BigInt!]
  hackerVestedRewardSplit: BigInt!
  hackerRewardSplit: BigInt!
  committeeRewardSplit: BigInt!
  swapAndBurnSplit: BigInt!
  governanceHatRewardSplit: BigInt!
  hackerHatRewardSplit: BigInt!
  totalClaimedAmount: BigInt!
  liquidityPool: Boolean!
  registered: Boolean!
  withdrawRequests(skip: Int = 0, first: Int = 100, orderBy: PoolWithdrawRequest_orderBy, orderDirection: OrderDirection, where: PoolWithdrawRequest_filter): [PoolWithdrawRequest!]
  totalUsersShares: BigInt!
  descriptionHash: String!
  depositPause: Boolean!
  vestingDuration: BigInt!
  vestingPeriods: BigInt!
  committeeCheckedIn: Boolean!
  maxBounty: BigInt
  arbitrator: Bytes
  arbitratorCanChangeBounty: ArbitratorCanChangeBounty
  challengePeriod: BigInt
  challengeTimeOutPeriod: BigInt
  rewardControllers(skip: Int = 0, first: Int = 100, orderBy: RewardController_orderBy, orderDirection: OrderDirection, where: RewardController_filter): [RewardController!]!
  pendingMaxBounty: BigInt
  withdrawalFee: BigInt
  owner: Bytes
  activeClaim: Claim
  version: String!
}

input Vault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pid: BigInt
  pid_not: BigInt
  pid_gt: BigInt
  pid_lt: BigInt
  pid_gte: BigInt
  pid_lte: BigInt
  pid_in: [BigInt!]
  pid_not_in: [BigInt!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  stakingToken: Bytes
  stakingToken_not: Bytes
  stakingToken_gt: Bytes
  stakingToken_lt: Bytes
  stakingToken_gte: Bytes
  stakingToken_lte: Bytes
  stakingToken_in: [Bytes!]
  stakingToken_not_in: [Bytes!]
  stakingToken_contains: Bytes
  stakingToken_not_contains: Bytes
  stakingTokenDecimals: BigInt
  stakingTokenDecimals_not: BigInt
  stakingTokenDecimals_gt: BigInt
  stakingTokenDecimals_lt: BigInt
  stakingTokenDecimals_gte: BigInt
  stakingTokenDecimals_lte: BigInt
  stakingTokenDecimals_in: [BigInt!]
  stakingTokenDecimals_not_in: [BigInt!]
  stakingTokenSymbol: String
  stakingTokenSymbol_not: String
  stakingTokenSymbol_gt: String
  stakingTokenSymbol_lt: String
  stakingTokenSymbol_gte: String
  stakingTokenSymbol_lte: String
  stakingTokenSymbol_in: [String!]
  stakingTokenSymbol_not_in: [String!]
  stakingTokenSymbol_contains: String
  stakingTokenSymbol_contains_nocase: String
  stakingTokenSymbol_not_contains: String
  stakingTokenSymbol_not_contains_nocase: String
  stakingTokenSymbol_starts_with: String
  stakingTokenSymbol_starts_with_nocase: String
  stakingTokenSymbol_not_starts_with: String
  stakingTokenSymbol_not_starts_with_nocase: String
  stakingTokenSymbol_ends_with: String
  stakingTokenSymbol_ends_with_nocase: String
  stakingTokenSymbol_not_ends_with: String
  stakingTokenSymbol_not_ends_with_nocase: String
  stakers_: Staker_filter
  honeyPotBalance: BigInt
  honeyPotBalance_not: BigInt
  honeyPotBalance_gt: BigInt
  honeyPotBalance_lt: BigInt
  honeyPotBalance_gte: BigInt
  honeyPotBalance_lte: BigInt
  honeyPotBalance_in: [BigInt!]
  honeyPotBalance_not_in: [BigInt!]
  totalRewardPaid: BigInt
  totalRewardPaid_not: BigInt
  totalRewardPaid_gt: BigInt
  totalRewardPaid_lt: BigInt
  totalRewardPaid_gte: BigInt
  totalRewardPaid_lte: BigInt
  totalRewardPaid_in: [BigInt!]
  totalRewardPaid_not_in: [BigInt!]
  committee: Bytes
  committee_not: Bytes
  committee_gt: Bytes
  committee_lt: Bytes
  committee_gte: Bytes
  committee_lte: Bytes
  committee_in: [Bytes!]
  committee_not_in: [Bytes!]
  committee_contains: Bytes
  committee_not_contains: Bytes
  allocPoints: [BigInt!]
  allocPoints_not: [BigInt!]
  allocPoints_contains: [BigInt!]
  allocPoints_contains_nocase: [BigInt!]
  allocPoints_not_contains: [BigInt!]
  allocPoints_not_contains_nocase: [BigInt!]
  allocPoint: BigInt
  allocPoint_not: BigInt
  allocPoint_gt: BigInt
  allocPoint_lt: BigInt
  allocPoint_gte: BigInt
  allocPoint_lte: BigInt
  allocPoint_in: [BigInt!]
  allocPoint_not_in: [BigInt!]
  master: String
  master_not: String
  master_gt: String
  master_lt: String
  master_gte: String
  master_lte: String
  master_in: [String!]
  master_not_in: [String!]
  master_contains: String
  master_contains_nocase: String
  master_not_contains: String
  master_not_contains_nocase: String
  master_starts_with: String
  master_starts_with_nocase: String
  master_not_starts_with: String
  master_not_starts_with_nocase: String
  master_ends_with: String
  master_ends_with_nocase: String
  master_not_ends_with: String
  master_not_ends_with_nocase: String
  master_: Master_filter
  numberOfApprovedClaims: BigInt
  numberOfApprovedClaims_not: BigInt
  numberOfApprovedClaims_gt: BigInt
  numberOfApprovedClaims_lt: BigInt
  numberOfApprovedClaims_gte: BigInt
  numberOfApprovedClaims_lte: BigInt
  numberOfApprovedClaims_in: [BigInt!]
  numberOfApprovedClaims_not_in: [BigInt!]
  numberOfDismissedClaims: BigInt
  numberOfDismissedClaims_not: BigInt
  numberOfDismissedClaims_gt: BigInt
  numberOfDismissedClaims_lt: BigInt
  numberOfDismissedClaims_gte: BigInt
  numberOfDismissedClaims_lte: BigInt
  numberOfDismissedClaims_in: [BigInt!]
  numberOfDismissedClaims_not_in: [BigInt!]
  rewardsLevels: [BigInt!]
  rewardsLevels_not: [BigInt!]
  rewardsLevels_contains: [BigInt!]
  rewardsLevels_contains_nocase: [BigInt!]
  rewardsLevels_not_contains: [BigInt!]
  rewardsLevels_not_contains_nocase: [BigInt!]
  hackerVestedRewardSplit: BigInt
  hackerVestedRewardSplit_not: BigInt
  hackerVestedRewardSplit_gt: BigInt
  hackerVestedRewardSplit_lt: BigInt
  hackerVestedRewardSplit_gte: BigInt
  hackerVestedRewardSplit_lte: BigInt
  hackerVestedRewardSplit_in: [BigInt!]
  hackerVestedRewardSplit_not_in: [BigInt!]
  hackerRewardSplit: BigInt
  hackerRewardSplit_not: BigInt
  hackerRewardSplit_gt: BigInt
  hackerRewardSplit_lt: BigInt
  hackerRewardSplit_gte: BigInt
  hackerRewardSplit_lte: BigInt
  hackerRewardSplit_in: [BigInt!]
  hackerRewardSplit_not_in: [BigInt!]
  committeeRewardSplit: BigInt
  committeeRewardSplit_not: BigInt
  committeeRewardSplit_gt: BigInt
  committeeRewardSplit_lt: BigInt
  committeeRewardSplit_gte: BigInt
  committeeRewardSplit_lte: BigInt
  committeeRewardSplit_in: [BigInt!]
  committeeRewardSplit_not_in: [BigInt!]
  swapAndBurnSplit: BigInt
  swapAndBurnSplit_not: BigInt
  swapAndBurnSplit_gt: BigInt
  swapAndBurnSplit_lt: BigInt
  swapAndBurnSplit_gte: BigInt
  swapAndBurnSplit_lte: BigInt
  swapAndBurnSplit_in: [BigInt!]
  swapAndBurnSplit_not_in: [BigInt!]
  governanceHatRewardSplit: BigInt
  governanceHatRewardSplit_not: BigInt
  governanceHatRewardSplit_gt: BigInt
  governanceHatRewardSplit_lt: BigInt
  governanceHatRewardSplit_gte: BigInt
  governanceHatRewardSplit_lte: BigInt
  governanceHatRewardSplit_in: [BigInt!]
  governanceHatRewardSplit_not_in: [BigInt!]
  hackerHatRewardSplit: BigInt
  hackerHatRewardSplit_not: BigInt
  hackerHatRewardSplit_gt: BigInt
  hackerHatRewardSplit_lt: BigInt
  hackerHatRewardSplit_gte: BigInt
  hackerHatRewardSplit_lte: BigInt
  hackerHatRewardSplit_in: [BigInt!]
  hackerHatRewardSplit_not_in: [BigInt!]
  totalClaimedAmount: BigInt
  totalClaimedAmount_not: BigInt
  totalClaimedAmount_gt: BigInt
  totalClaimedAmount_lt: BigInt
  totalClaimedAmount_gte: BigInt
  totalClaimedAmount_lte: BigInt
  totalClaimedAmount_in: [BigInt!]
  totalClaimedAmount_not_in: [BigInt!]
  liquidityPool: Boolean
  liquidityPool_not: Boolean
  liquidityPool_in: [Boolean!]
  liquidityPool_not_in: [Boolean!]
  registered: Boolean
  registered_not: Boolean
  registered_in: [Boolean!]
  registered_not_in: [Boolean!]
  withdrawRequests_: PoolWithdrawRequest_filter
  totalUsersShares: BigInt
  totalUsersShares_not: BigInt
  totalUsersShares_gt: BigInt
  totalUsersShares_lt: BigInt
  totalUsersShares_gte: BigInt
  totalUsersShares_lte: BigInt
  totalUsersShares_in: [BigInt!]
  totalUsersShares_not_in: [BigInt!]
  descriptionHash: String
  descriptionHash_not: String
  descriptionHash_gt: String
  descriptionHash_lt: String
  descriptionHash_gte: String
  descriptionHash_lte: String
  descriptionHash_in: [String!]
  descriptionHash_not_in: [String!]
  descriptionHash_contains: String
  descriptionHash_contains_nocase: String
  descriptionHash_not_contains: String
  descriptionHash_not_contains_nocase: String
  descriptionHash_starts_with: String
  descriptionHash_starts_with_nocase: String
  descriptionHash_not_starts_with: String
  descriptionHash_not_starts_with_nocase: String
  descriptionHash_ends_with: String
  descriptionHash_ends_with_nocase: String
  descriptionHash_not_ends_with: String
  descriptionHash_not_ends_with_nocase: String
  depositPause: Boolean
  depositPause_not: Boolean
  depositPause_in: [Boolean!]
  depositPause_not_in: [Boolean!]
  vestingDuration: BigInt
  vestingDuration_not: BigInt
  vestingDuration_gt: BigInt
  vestingDuration_lt: BigInt
  vestingDuration_gte: BigInt
  vestingDuration_lte: BigInt
  vestingDuration_in: [BigInt!]
  vestingDuration_not_in: [BigInt!]
  vestingPeriods: BigInt
  vestingPeriods_not: BigInt
  vestingPeriods_gt: BigInt
  vestingPeriods_lt: BigInt
  vestingPeriods_gte: BigInt
  vestingPeriods_lte: BigInt
  vestingPeriods_in: [BigInt!]
  vestingPeriods_not_in: [BigInt!]
  committeeCheckedIn: Boolean
  committeeCheckedIn_not: Boolean
  committeeCheckedIn_in: [Boolean!]
  committeeCheckedIn_not_in: [Boolean!]
  maxBounty: BigInt
  maxBounty_not: BigInt
  maxBounty_gt: BigInt
  maxBounty_lt: BigInt
  maxBounty_gte: BigInt
  maxBounty_lte: BigInt
  maxBounty_in: [BigInt!]
  maxBounty_not_in: [BigInt!]
  arbitrator: Bytes
  arbitrator_not: Bytes
  arbitrator_gt: Bytes
  arbitrator_lt: Bytes
  arbitrator_gte: Bytes
  arbitrator_lte: Bytes
  arbitrator_in: [Bytes!]
  arbitrator_not_in: [Bytes!]
  arbitrator_contains: Bytes
  arbitrator_not_contains: Bytes
  arbitratorCanChangeBounty: ArbitratorCanChangeBounty
  arbitratorCanChangeBounty_not: ArbitratorCanChangeBounty
  arbitratorCanChangeBounty_in: [ArbitratorCanChangeBounty!]
  arbitratorCanChangeBounty_not_in: [ArbitratorCanChangeBounty!]
  challengePeriod: BigInt
  challengePeriod_not: BigInt
  challengePeriod_gt: BigInt
  challengePeriod_lt: BigInt
  challengePeriod_gte: BigInt
  challengePeriod_lte: BigInt
  challengePeriod_in: [BigInt!]
  challengePeriod_not_in: [BigInt!]
  challengeTimeOutPeriod: BigInt
  challengeTimeOutPeriod_not: BigInt
  challengeTimeOutPeriod_gt: BigInt
  challengeTimeOutPeriod_lt: BigInt
  challengeTimeOutPeriod_gte: BigInt
  challengeTimeOutPeriod_lte: BigInt
  challengeTimeOutPeriod_in: [BigInt!]
  challengeTimeOutPeriod_not_in: [BigInt!]
  rewardControllers: [String!]
  rewardControllers_not: [String!]
  rewardControllers_contains: [String!]
  rewardControllers_contains_nocase: [String!]
  rewardControllers_not_contains: [String!]
  rewardControllers_not_contains_nocase: [String!]
  rewardControllers_: RewardController_filter
  pendingMaxBounty: BigInt
  pendingMaxBounty_not: BigInt
  pendingMaxBounty_gt: BigInt
  pendingMaxBounty_lt: BigInt
  pendingMaxBounty_gte: BigInt
  pendingMaxBounty_lte: BigInt
  pendingMaxBounty_in: [BigInt!]
  pendingMaxBounty_not_in: [BigInt!]
  withdrawalFee: BigInt
  withdrawalFee_not: BigInt
  withdrawalFee_gt: BigInt
  withdrawalFee_lt: BigInt
  withdrawalFee_gte: BigInt
  withdrawalFee_lte: BigInt
  withdrawalFee_in: [BigInt!]
  withdrawalFee_not_in: [BigInt!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  activeClaim: String
  activeClaim_not: String
  activeClaim_gt: String
  activeClaim_lt: String
  activeClaim_gte: String
  activeClaim_lte: String
  activeClaim_in: [String!]
  activeClaim_not_in: [String!]
  activeClaim_contains: String
  activeClaim_contains_nocase: String
  activeClaim_not_contains: String
  activeClaim_not_contains_nocase: String
  activeClaim_starts_with: String
  activeClaim_starts_with_nocase: String
  activeClaim_not_starts_with: String
  activeClaim_not_starts_with_nocase: String
  activeClaim_ends_with: String
  activeClaim_ends_with_nocase: String
  activeClaim_not_ends_with: String
  activeClaim_not_ends_with_nocase: String
  activeClaim_: Claim_filter
  version: String
  version_not: String
  version_gt: String
  version_lt: String
  version_gte: String
  version_lte: String
  version_in: [String!]
  version_not_in: [String!]
  version_contains: String
  version_contains_nocase: String
  version_not_contains: String
  version_not_contains_nocase: String
  version_starts_with: String
  version_starts_with_nocase: String
  version_not_starts_with: String
  version_not_starts_with_nocase: String
  version_ends_with: String
  version_ends_with_nocase: String
  version_not_ends_with: String
  version_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Vault_filter]
  or: [Vault_filter]
}

enum Vault_orderBy {
  id
  pid
  name
  symbol
  stakingToken
  stakingTokenDecimals
  stakingTokenSymbol
  stakers
  honeyPotBalance
  totalRewardPaid
  committee
  allocPoints
  allocPoint
  master
  master__id
  master__address
  master__governance
  master__totalRewardPaid
  master__rewardPerBlock
  master__startBlock
  master__createdAt
  master__swapToken
  master__numberOfSubmittedClaims
  master__withdrawPeriod
  master__safetyPeriod
  master__withdrawRequestEnablePeriod
  master__withdrawRequestPendingPeriod
  master__vestingHatDuration
  master__vestingHatPeriods
  master__setMaxBountyDelay
  master__claimFee
  master__feeSetter
  master__defaultArbitrator
  master__defaultArbitratorCanChangeBounty
  master__defaultChallengePeriod
  master__defaultChallengeTimeOutPeriod
  master__defaultGovernanceHatRewardSplit
  master__defaultHackerHatRewardSplit
  master__numberOfVaults
  master__emergencyPause
  numberOfApprovedClaims
  numberOfDismissedClaims
  rewardsLevels
  hackerVestedRewardSplit
  hackerRewardSplit
  committeeRewardSplit
  swapAndBurnSplit
  governanceHatRewardSplit
  hackerHatRewardSplit
  totalClaimedAmount
  liquidityPool
  registered
  withdrawRequests
  totalUsersShares
  descriptionHash
  depositPause
  vestingDuration
  vestingPeriods
  committeeCheckedIn
  maxBounty
  arbitrator
  arbitratorCanChangeBounty
  challengePeriod
  challengeTimeOutPeriod
  rewardControllers
  pendingMaxBounty
  withdrawalFee
  owner
  activeClaim
  activeClaim__id
  activeClaim__claim
  activeClaim__claimer
  activeClaim__createdAt
  activeClaim__approvedAt
  activeClaim__dismissedAt
  activeClaim__severity
  activeClaim__bountyPercentage
  activeClaim__approver
  activeClaim__hackerReward
  activeClaim__hackerVestedReward
  activeClaim__committeeReward
  activeClaim__swapAndBurn
  activeClaim__governanceHatReward
  activeClaim__hackerHatReward
  activeClaim__isChallenged
  version
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

schema{
	query: Query,
	subscription: Subscription
}